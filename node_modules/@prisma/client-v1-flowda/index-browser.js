
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('./runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AppScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  hashedAppToken: 'hashedAppToken',
  hashedPassword: 'hashedPassword',
  hashedRefreshToken: 'hashedRefreshToken',
  recoveryCode: 'recoveryCode',
  recoveryToken: 'recoveryToken',
  displayName: 'displayName',
  description: 'description',
  isDeleted: 'isDeleted',
  tenantId: 'tenantId'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  email: 'email',
  hashedPassword: 'hashedPassword',
  hashedRefreshToken: 'hashedRefreshToken',
  recoveryCode: 'recoveryCode',
  recoveryToken: 'recoveryToken',
  role: 'role'
};

exports.Prisma.TenantPreSignupScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  verifyCode: 'verifyCode'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  uid: 'uid',
  question: 'question',
  answer: 'answer',
  success: 'success',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JYProfileScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.JYFreeCountScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cycle: 'cycle',
  count: 'count',
  profileId: 'profileId'
};

exports.Prisma.ArticleScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  link: 'link',
  source: 'source',
  title: 'title',
  image: 'image',
  excerpt: 'excerpt',
  profileId: 'profileId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  price: 'price',
  productType: 'productType',
  plan: 'plan',
  amount: 'amount',
  extendedDescriptionData: 'extendedDescriptionData',
  fileSize: 'fileSize',
  storeDuration: 'storeDuration',
  hasAds: 'hasAds',
  tecSupport: 'tecSupport',
  validityPeriod: 'validityPeriod',
  appId: 'appId',
  isDeleted: 'isDeleted',
  tenantId: 'tenantId',
  restricted: 'restricted'
};

exports.Prisma.PayScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  orderId: 'orderId',
  transactionId: 'transactionId',
  tenantId: 'tenantId'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  appId: 'appId',
  email: 'email',
  hashedPassword: 'hashedPassword',
  hashedRefreshToken: 'hashedRefreshToken',
  recoveryCode: 'recoveryCode',
  recoveryToken: 'recoveryToken',
  isDeleted: 'isDeleted',
  tenantId: 'tenantId'
};

exports.Prisma.WeixinProfileScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  unionid: 'unionid',
  loginOpenid: 'loginOpenid',
  headimgurl: 'headimgurl',
  nickname: 'nickname',
  sex: 'sex',
  customerId: 'customerId',
  tenantId: 'tenantId'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  productType: 'productType',
  plan: 'plan',
  amount: 'amount',
  expireAt: 'expireAt',
  tenantId: 'tenantId'
};

exports.Prisma.CustomerPreSignupScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  verifyCode: 'verifyCode',
  appId: 'appId',
  tenantId: 'tenantId'
};

exports.Prisma.LegacyProfileScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  license: 'license',
  refreshToken: 'refreshToken'
};

exports.Prisma.ProductSnapshotScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  snapshotPrice: 'snapshotPrice',
  orderId: 'orderId',
  productId: 'productId',
  tenantId: 'tenantId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  serial: 'serial',
  status: 'status',
  customerId: 'customerId',
  appId: 'appId',
  isDeleted: 'isDeleted',
  tenantId: 'tenantId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ProductType = {
  AMOUNT: 'AMOUNT',
  PLAN: 'PLAN'
};

exports.PayStatus = {
  UNPAIED: 'UNPAIED',
  PAIED: 'PAIED',
  REFUND: 'REFUND'
};

exports.OrderStatus = {
  INITIALIZED: 'INITIALIZED',
  PAY_ASSOCIATED: 'PAY_ASSOCIATED',
  FREE_DEAL: 'FREE_DEAL',
  CANCELED: 'CANCELED'
};

exports.Prisma.ModelName = {
  App: 'App',
  Tenant: 'Tenant',
  TenantPreSignup: 'TenantPreSignup',
  Question: 'Question',
  JYProfile: 'JYProfile',
  JYFreeCount: 'JYFreeCount',
  Article: 'Article',
  Product: 'Product',
  Pay: 'Pay',
  Customer: 'Customer',
  WeixinProfile: 'WeixinProfile',
  Profile: 'Profile',
  customerPreSignup: 'customerPreSignup',
  LegacyProfile: 'LegacyProfile',
  ProductSnapshot: 'ProductSnapshot',
  Order: 'Order'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
